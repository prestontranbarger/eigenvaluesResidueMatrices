from base import *

def gaussSum(c):
    #computes the gauss sum of a primary c in Z[omega]
    #here the quotient ring need not be defined, Z[omega] quotient the ideal generated by c in Z[omega]
    #is a ring containing N(c) elements, in this case all elements {k*omega} where 0<=k<N(c) works well
    #in defining the elements of this ring
    sum = 0
    for i in range(normEisenstein(c)):
        sum += extendedCubicResidueSymbol(omega * i, c)[0] * ehat(omega * i / c)
    return sum

def normalizedGaussSum(c):
    #computes the normalized gauss sum on the complex unit circle
    return gaussSum(c) / math.sqrt(normEisenstein(c))

#print(cexps(997) / (2 * math.sqrt(997)))
#print(simplifyComplex(normalizedGaussSum(-13 - 36 * omega)))